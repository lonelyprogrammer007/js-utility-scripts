{
  "project_files": [
    {
      "name": "package.json",
      "content": "{\n  \"name\": \"notion-doc-generator\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node ./bin/www\"\n  },\n  \"dependencies\": {\n    \"@notionhq/client\": \"^2.2.13\",\n    \"cookie-parser\": \"~1.4.6\",\n    \"debug\": \"~4.3.4\",\n    \"dotenv\": \"^16.3.1\",\n    \"ejs\": \"~3.1.9\",\n    \"express\": \"~4.18.2\",\n    \"http-errors\": \"~2.0.0\",\n    \"morgan\": \"~1.10.0\"\n  }\n}"
    },
    {
      "name": ".env",
      "content": "# Replace with your Notion Integration Token\nNOTION_API_KEY=\"YOUR_NOTION_API_KEY\"\n"
    },
    {
      "name": "app.js",
      "content": "require('dotenv').config();\nconst createError = require('http-errors');\nconst express = require('express');\nconst path = require('path');\nconst cookieParser = require('cookie-parser');\nconst logger = require('morgan');\n\nconst indexRouter = require('./routes/index');\n\nconst app = express();\n\n// View engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\n\n// Catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// Error handler\napp.use(function(err, req, res, next) {\n  // Set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // Render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;"
    },
    {
      "name": "bin/www",
      "content": "#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nconst app = require('../app');\nconst debug = require('debug')('notion-doc-generator:server');\nconst http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  const port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  const addr = server.address();\n  const bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n  console.log('Server started on http://localhost:' + port);\n}"
    },
    {
      "name": "routes/index.js",
      "content": "const express = require('express');\nconst router = express.Router();\nconst notionService = require('../services/notionService');\nconst markdownService = require('../services/markdownService');\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Notion Documentation Generator' });\n});\n\n/* POST to generate documentation */\nrouter.post('/generate', async (req, res, next) => {\n  const { pageId } = req.body;\n  if (!pageId) {\n    return res.render('index', { \n      title: 'Notion Documentation Generator', \n      error: 'Please provide a Notion Page ID.' \n    });\n  }\n\n  try {\n    const documentation = await notionService.generateDocumentation(pageId);\n    if (documentation.length === 0) {\n        return res.render('index', { \n            title: 'Notion Documentation Generator', \n            error: 'No databases found on the specified page. Ensure the page ID is correct and the integration has access.' \n        });\n    }\n    res.render('documentation', { \n      title: 'Generated Documentation', \n      databases: documentation,\n      pageId: pageId\n    });\n  } catch (error) {\n    console.error(error);\n    // More specific error messages for the user\n    let userError = 'An error occurred while fetching data from Notion. Please check the console for details.';\n    if (error.code === 'object_not_found' || error.status === 404) {\n        userError = 'The provided Page ID was not found. Please ensure it is correct and that your Notion integration has been shared with that page.';\n    }\n    if (error.code === 'unauthorized' || error.status === 401) {\n        userError = 'The Notion API Key is invalid or has not been provided. Please check your .env file.';\n    }\n    res.render('index', { \n      title: 'Notion Documentation Generator', \n      error: userError \n    });\n  }\n});\n\n/* POST to generate and download markdown documentation */\nrouter.post('/generate-markdown', async (req, res, next) => {\n  const { pageId } = req.body;\n  if (!pageId) {\n      return res.status(400).send('Page ID is required.');\n  }\n\n  try {\n      const documentation = await notionService.generateDocumentation(pageId);\n      const markdownContent = markdownService.convertToMarkdown(documentation, pageId);\n      \n      const fileName = `notion_doc_${pageId}.md`;\n\n      res.setHeader('Content-Type', 'text/markdown; charset=UTF-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n      res.send(markdownContent);\n  } catch (error) {\n      console.error(\"Error generating markdown:\", error);\n      next(error); // Pass to the main error handler\n  }\n});\n\nmodule.exports = router;"
    },
    {
      "name": "services/notionService.js",
      "content": "const { Client } = require('@notionhq/client');\n\n// Initializing a client\nconst notion = new Client({\n  auth: process.env.NOTION_API_KEY,\n});\n\n/**\n * Fetches all child database blocks from a given Notion page.\n * @param {string} pageId - The ID of the Notion page.\n * @returns {Promise<Array<string>>} - A promise that resolves to an array of database IDs.\n */\nasync function getDatabasesFromPage(pageId) {\n  try {\n    const response = await notion.blocks.children.list({ block_id: pageId });\n    const databaseIds = response.results\n      .filter(block => block.type === 'child_database')\n      .map(block => block.id);\n    return databaseIds;\n  } catch (error) {\n    console.error('Error fetching blocks from page:', error.body || error);\n    throw error;\n  }\n}\n\n/**\n * Parses a formula expression to find dependencies on other properties.\n * @param {string} expression - The formula expression string.\n * @returns {Array<string>} - An array of property names this formula depends on.\n */\nfunction getFormulaDependencies(expression) {\n    if (!expression) return [];\n    const regex = /prop\KATEX_INLINE_OPEN\"(.+?)\"\KATEX_INLINE_CLOSE/g;\n    let matches;\n    const dependencies = new Set();\n    while ((matches = regex.exec(expression)) !== null) {\n        dependencies.add(matches[1]);\n    }\n    return Array.from(dependencies);\n}\n\n/**\n * Retrieves detailed information about a specific database, including properties, formulas, and relations.\n * @param {string} databaseId - The ID of the Notion database.\n * @returns {Promise<Object>} - A promise that resolves to an object containing database details.\n */\nasync function getDatabaseDetails(databaseId) {\n  try {\n    const response = await notion.databases.retrieve({ database_id: databaseId });\n    const properties = [];\n\n    for (const [name, prop] of Object.entries(response.properties)) {\n      let details = {\n        name: name,\n        type: prop.type,\n        formula: null,\n        dependencies: [],\n        relation: null,\n        rollup: null,\n        template: ''\n      };\n\n      if (prop.type === 'formula' && prop.formula) {\n        details.formula = prop.formula.expression;\n        details.dependencies = getFormulaDependencies(prop.formula.expression);\n      }\n\n      if (prop.type === 'relation' && prop.relation) {\n        details.relation = {\n            database_id: prop.relation.database_id\n        };\n      }\n\n      if (prop.type === 'rollup' && prop.rollup) {\n        details.rollup = {\n            relation_property_name: prop.rollup.relation_property_name,\n            rollup_property_name: prop.rollup.rollup_property_name,\n            function: prop.rollup.function\n        };\n      }\n      \n      properties.push(details);\n    }\n\n    return {\n      id: response.id,\n      title: response.title.length > 0 ? response.title[0].plain_text : 'Untitled Database',\n      description: response.description.length > 0 ? response.description[0].plain_text : '',\n      properties: properties,\n    };\n  } catch (error) {\n    console.error(`Error fetching details for database ${databaseId}:`, error.body || error);\n    throw error;\n  }\n}\n\n/**\n * Main function to generate documentation for all databases on a page.\n * @param {string} pageId - The ID of the Notion page.\n * @returns {Promise<Array<Object>>} - A promise that resolves to an array of documentation objects for each database.\n */\nasync function generateDocumentation(pageId) {\n  const databaseIds = await getDatabasesFromPage(pageId);\n  if (databaseIds.length === 0) {\n    return [];\n  }\n\n  const documentation = await Promise.all(\n    databaseIds.map(id => getDatabaseDetails(id))\n  );\n\n  // Create a map of database IDs to their titles for easy lookup\n  const dbIdToTitleMap = documentation.reduce((acc, db) => {\n      acc[db.id] = db.title;\n      return acc;\n  }, {});\n\n  // Augment documentation with relation titles\n  documentation.forEach(db => {\n      db.properties.forEach(prop => {\n          if (prop.relation && dbIdToTitleMap[prop.relation.database_id]) {\n              prop.relation.database_title = dbIdToTitleMap[prop.relation.database_id];\n          }\n      });\n  });\n\n  return documentation;\n}\n\nmodule.exports = { generateDocumentation };"
    },
    {
      "name": "services/markdownService.js",
      "content": "/**\n * Converts the documentation data object into a Markdown string.\n * @param {Array<Object>} documentation - The array of database documentation objects.\n * @param {string} pageId - The ID of the parent Notion page.\n * @returns {string} - The generated Markdown content.\n */\nfunction convertToMarkdown(documentation, pageId) {\n    let md = `# Notion Documentation\\n\\n`;\n    md += `Generated for databases on page: \\`${pageId}\\`\\n\\n`;\n\n    if (documentation.length === 0) {\n        md += `*No databases were found on the specified page.*`;\n        return md;\n    }\n\n    documentation.forEach(db => {\n        md += `## Database: ${db.title}\\n\\n`;\n        if (db.description) {\n            md += `${db.description}\\n\\n`;\n        }\n\n        md += `### Properties & Schema\\n\\n`;\n        md += `| Property Name | Type | Details (Formula, Relation, Rollup) |\\n`;\n        md += `|---------------|------|---------------------------------------|\\n`;\n\n        db.properties.forEach(prop => {\n            let details = 'N/A';\n            \n            if (prop.type === 'formula' && prop.formula) {\n                let formulaDetails = `**Formula:** \\\\`\\\\`\\\\`\\n${prop.formula}\\n\\\\`\\\\`\\\\``;\n                if (prop.dependencies.length > 0) {\n                    const deps = prop.dependencies.map(d => `\\`${d}\\``).join(', ');\n                    formulaDetails += `<br>**Depends on:** ${deps}`;\n                }\n                details = formulaDetails;\n            } else if (prop.type === 'relation' && prop.relation) {\n                const relatedDb = prop.relation.database_title || prop.relation.database_id;\n                details = `**Relation to:** \\`${relatedDb}\\``;\n            } else if (prop.type === 'rollup' && prop.rollup) {\n                details = `**Rollup via:** \\`${prop.rollup.relation_property_name}\\`<br>` +\n                          `**Of Property:** \\`${prop.rollup.rollup_property_name}\\`<br>` +\n                          `**Using:** \\`${prop.rollup.function}\\``;\n            }\n            // Markdown tables are sensitive to pipes in content. Replace them.\n            const cleanName = prop.name.replace(/\\\\|/g, '\\\\\\\\|');\n            const cleanDetails = details.replace(/\\\\|/g, '\\\\\\\\|');\n\n            md += `| ${cleanName} | \\`${prop.type}\\` | ${cleanDetails} |\\n`;\n        });\n\n        md += `\\n---\\n\\n`; // Add a horizontal rule for separation\n    });\n\n    return md;\n}\n\nmodule.exports = {\n    convertToMarkdown\n};"
    },
    {
      "name": "views/layout.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel=\"stylesheet\" href=\"/stylesheets/style.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <%- body %>\n  </div>\n</body>\n</html>"
    },
    {
      "name": "views/index.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n</head>\n<body>\n  <div class=\"container\">\n    <h1><%= title %></h1>\n    <p>Enter the ID of your Notion page to generate documentation for its databases.</p>\n    \n    <% if (typeof error !== 'undefined' && error) { %>\n      <div class=\"error-message\"><%= error %></div>\n    <% } %>\n\n    <form action=\"/generate\" method=\"POST\">\n      <div class=\"form-group\">\n        <label for=\"pageId\">Notion Page ID:</label>\n        <input type=\"text\" id=\"pageId\" name=\"pageId\" placeholder=\"e.g., 1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c\" required>\n      </div>\n      <button type=\"submit\" class=\"btn\">Generate Documentation</button>\n    </form>\n    \n    <div class=\"instructions\">\n      <h2>How to get your Page ID:</h2>\n      <ol>\n        <li>Open your Notion page in a web browser.</li>\n        <li>The URL will look like: <code>https://www.notion.so/Your-Page-Title-<b>1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c</b></code></li>\n        <li>The Page ID is the long string of characters at the end of the URL.</li>\n        <li>Make sure you have shared this page with your Notion Integration.</li>\n      </ol>\n    </div>\n  </div>\n</body>\n</html>"
    },
    {
      "name": "views/documentation.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"page-actions\">\n      <a href=\"/\" class=\"btn btn-back\">&larr; Back to Home</a>\n      <form action=\"/generate-markdown\" method=\"POST\" class=\"markdown-form\">\n        <input type=\"hidden\" name=\"pageId\" value=\"<%= pageId %>\">\n        <button type=\"submit\" class=\"btn btn-secondary\">Download as Markdown</button>\n      </form>\n    </div>\n\n    <h1><%= title %></h1>\n    <p>Documentation generated for databases on page: <strong><%= pageId %></strong></p>\n\n    <% databases.forEach(db => { %>\n      <div class=\"database-section\">\n        <h2>Database: <%= db.title %></h2>\n        <% if (db.description) { %>\n          <p class=\"database-description\"><%= db.description %></p>\n        <% } %>\n        \n        <h3>Properties & Schema</h3>\n        <table class=\"properties-table\">\n          <thead>\n            <tr>\n              <th>Property Name</th>\n              <th>Type</th>\n              <th>Dependencies & Relations</th>\n              <th>Notes (Template)</th>\n            </tr>\n          </thead>\n          <tbody>\n            <% db.properties.forEach(prop => { %>\n              <tr>\n                <td><%= prop.name %></td>\n                <td><span class=\"property-type property-type-<%= prop.type %>\"><%= prop.type %></span></td>\n                <td class=\"dependencies-cell\">\n                  <% if (prop.type === 'formula') { %>\n                    <div class=\"formula-details\">\n                      <strong>Formula:</strong>\n                      <code><%= prop.formula %></code>\n                      <% if (prop.dependencies.length > 0) { %>\n                        <strong>Depends on:</strong>\n                        <ul>\n                          <% prop.dependencies.forEach(dep => { %>\n                            <li><%= dep %></li>\n                          <% }); %>\n                        </ul>\n                      <% } %>\n                    </div>\n                  <% } else if (prop.type === 'relation' && prop.relation) { %>\n                    <div class=\"relation-details\">\n                      <strong>Relation to:</strong> \n                      <span class=\"db-relation\"><%= prop.relation.database_title || prop.relation.database_id %></span>\n                    </div>\n                  <% } else if (prop.type === 'rollup' && prop.rollup) { %>\n                    <div class=\"rollup-details\">\n                      <div><strong>Rollup via:</strong> <span class=\"relation-prop\"><%= prop.rollup.relation_property_name %></span></div>\n                      <div><strong>Of Property:</strong> <span class=\"rollup-prop\"><%= prop.rollup.rollup_property_name %></span></div>\n                      <div><strong>Using:</strong> <span class=\"rollup-func\"><%= prop.rollup.function %></span></div>\n                    </div>\n                  <% } else { %>\n                    <span class=\"not-applicable\">N/A</span>\n                  <% } %>\n                </td>\n                <td>\n                  <textarea class=\"notes-template\" placeholder=\"Add your notes here...\"></textarea>\n                </td>\n              </tr>\n            <% }); %>\n          </tbody>\n        </table>\n      </div>\n    <% }); %>\n  </div>\n</body>\n</html>"
    },
    {
      "name": "views/error.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Error</title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n</head>\n<body>\n    <div class=\"container\">\n        <h1><%= message %></h1>\n        <h2><%= error.status %></h2>\n        <pre><%= error.stack %></pre>\n    </div>\n</body>\n</html>"
    },
    {
      "name": "public/stylesheets/style.css",
      "content": "body {\n  padding: 50px;\n  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  background-color: #f4f4f9;\n  color: #333;\n  line-height: 1.6;\n}\n\n.container {\n  max-width: 1100px; /* Increased width for new column */\n  margin: 0 auto;\n  background-color: #fff;\n  padding: 40px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.08);\n}\n\nh1 {\n  font-size: 2em;\n  color: #1a1a1a;\n  border-bottom: 2px solid #eee;\n  padding-bottom: 10px;\n  margin-bottom: 20px;\n}\n\nh2 {\n  font-size: 1.5em;\n  color: #333;\n  margin-top: 40px;\n  margin-bottom: 20px;\n  border-left: 4px solid #5a4fcf;\n  padding-left: 10px;\n}\n\nh3 {\n    font-size: 1.2em;\n    color: #444;\n    margin-top: 20px;\n    margin-bottom: 10px;\n}\n\na {\n  color: #5a4fcf;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.btn, .btn-back {\n  display: inline-block;\n  background-color: #5a4fcf;\n  color: #fff;\n  padding: 10px 20px;\n  border-radius: 5px;\n  text-decoration: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1em;\n  margin-top: 20px;\n  transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #413a9a;\n}\n\n.btn-back {\n    background-color: #6c757d;\n    margin-top: 0; /* Remove margin for flex alignment */\n}\n\n.btn-back:hover {\n    background-color: #5a6268;\n}\n\n.btn.btn-secondary {\n  background-color: #28a745;\n}\n\n.btn.btn-secondary:hover {\n  background-color: #218838;\n}\n\n.page-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 25px;\n}\n\n.markdown-form {\n  margin: 0;\n}\n\n.markdown-form .btn {\n  margin-top: 0; /* Override default margin */\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.form-group input[type=\"text\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 10px;\n  border: 1px solid #f5c6cb;\n  border-radius: 5px;\n  margin-bottom: 20px;\n}\n\n.instructions {\n    margin-top: 40px;\n    background-color: #e9ecef;\n    padding: 20px;\n    border-radius: 5px;\n}\n\n.instructions code {\n    background-color: #d1d5db;\n    padding: 2px 5px;\n    border-radius: 3px;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n.database-section {\n  margin-bottom: 40px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #ddd;\n}\n\n.database-description {\n    font-style: italic;\n    color: #666;\n}\n\n.properties-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.properties-table th, .properties-table td {\n  border: 1px solid #ddd;\n  padding: 12px;\n  text-align: left;\n  vertical-align: top; /* Align content to the top */\n}\n\n.properties-table th {\n  background-color: #f8f9fa;\n  font-weight: bold;\n}\n\n.dependencies-cell strong {\n    display: block;\n    margin-bottom: 4px;\n    color: #333;\n}\n\n.dependencies-cell ul {\n    margin: 5px 0 0 0;\n    padding-left: 20px;\n}\n\n.dependencies-cell li {\n    margin-bottom: 4px;\n}\n\n.formula-details code {\n  background-color: #e9ecef;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-family: 'Courier New', Courier, monospace;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  display: block;\n  margin-bottom: 10px;\n}\n\n.db-relation, .relation-prop, .rollup-prop, .rollup-func {\n    background-color: #e0e7ff;\n    color: #4338ca;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: bold;\n}\n\n.rollup-details div {\n    margin-bottom: 5px;\n}\n\n.not-applicable {\n    color: #999;\n    font-style: italic;\n}\n\n.property-type {\n    padding: 3px 8px;\n    border-radius: 12px;\n    font-size: 0.85em;\n    color: #fff;\n    background-color: #6c757d;\n    display: inline-block;\n    white-space: nowrap;\n}\n\n.property-type-formula { background-color: #28a745; }\n.property-type-relation { background-color: #6f42c1; }\n.property-type-rollup { background-color: #e83e8c; }\n.property-type-title { background-color: #007bff; }\n.property-type-rich_text { background-color: #17a2b8; }\n.property-type-number { background-color: #fd7e14; }\n.property-type-select { background-color: #6f42c1; }\n.property-type-multi_select { background-color: #e83e8c; }\n.property-type-date { background-color: #dc3545; }\n.property-type-people { background-color: #ffc107; color: #333; }\n.property-type-files { background-color: #343a40; }\n.property-type-checkbox { background-color: #20c997; }\n.property-type-url { background-color: #0062cc; }\n.property-type-email { background-color: #17a2b8; }\n.property-type-phone_number { background-color: #28a745; }\n\n.notes-template {\n    width: 100%;\n    min-height: 50px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    resize: vertical;\n    box-sizing: border-box;\n}\n"
    }
  ]
}