{
  "project_files": [
    {
      "name": ".gitignore",
      "content": "# See http://help.github.com/ignore-files/ for more about ignoring files...\n# compiled output\n/dist\n/tmp\n/out-tsc\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# IDEs and editors\n.idea\n.project\n.classpath\n.c9/\n*.launch\n.settings/\n*.sublime-workspace\n\n# IDE - VSCode\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n# misc\n.sass-cache\nconnect.lock\ntypings\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\n# Lerna\nlerna-debug.log\n\n# System Files\n.DS_Store\nThumbs.db"
    },
    {
      "name": "app.js",
      "content": "require('dotenv').config();\nconst createError = require('http-errors');\nconst express = require('express');\nconst path = require('path');\nconst cookieParser = require('cookie-parser');\nconst logger = require('morgan');\n\nconst indexRouter = require('./routes/index');\n\nconst app = express();\n\n// View engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\n\n// Catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// Error handler\napp.use(function(err, req, res, next) {\n  // Set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // Render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;"
    },
    {
      "name": "package.json",
      "content": "{\n  \"name\": \"notion-doc-generator\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"nodemon ./bin/www\"\n  },\n  \"dependencies\": {\n    \"@notionhq/client\": \"^2.2.13\",\n    \"cookie-parser\": \"~1.4.6\",\n    \"debug\": \"~4.3.4\",\n    \"dotenv\": \"^16.3.1\",\n    \"ejs\": \"~3.1.9\",\n    \"express\": \"^4.21.2\",\n    \"http-errors\": \"~2.0.0\",\n    \"morgan\": \"~1.10.0\",\n    \"nodemon\": \"^3.1.10\"\n  }\n}"
    },
    {
      "name": ".vscode/settings.json",
      "content": "{\n    \"workbench.colorCustomizations\": {\n        \"activityBar.background\": \"#521B1F\",\n        \"titleBar.activeBackground\": \"#73252B\",\n        \"titleBar.activeForeground\": \"#FEFBFB\"\n    }\n}"
    },
    {
      "name": "bin/www",
      "content": "#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nconst app = require('../app');\nconst debug = require('debug')('notion-doc-generator:server');\nconst http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  const port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  const addr = server.address();\n  const bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n  console.log('Server started on http://localhost:' + port);\n}"
    },
    {
      "name": "public/stylesheets/style.css",
      "content": "body {\n  padding: 50px;\n  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  background-color: #f4f4f9;\n  color: #333;\n  line-height: 1.6;\n}\n\n.container {\n  max-width: 1100px; /* Increased width for new column */\n  margin: 0 auto;\n  background-color: #fff;\n  padding: 40px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.08);\n}\n\nh1 {\n  font-size: 2em;\n  color: #1a1a1a;\n  border-bottom: 2px solid #eee;\n  padding-bottom: 10px;\n  margin-bottom: 20px;\n}\n\nh2 {\n  font-size: 1.5em;\n  color: #333;\n  margin-top: 40px;\n  margin-bottom: 20px;\n  border-left: 4px solid #5a4fcf;\n  padding-left: 10px;\n}\n\nh3 {\n    font-size: 1.2em;\n    color: #444;\n    margin-top: 20px;\n    margin-bottom: 10px;\n}\n\na {\n  color: #5a4fcf;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.btn, .btn-back {\n  display: inline-block;\n  background-color: #5a4fcf;\n  color: #fff;\n  padding: 10px 20px;\n  border-radius: 5px;\n  text-decoration: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1em;\n  margin-top: 20px;\n  transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #413a9a;\n}\n\n.btn-back {\n    background-color: #6c757d;\n    margin-bottom: 20px;\n}\n\n.btn-back:hover {\n    background-color: #5a6268;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.form-group input[type=\"text\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 10px;\n  border: 1px solid #f5c6cb;\n  border-radius: 5px;\n  margin-bottom: 20px;\n}\n\n.instructions {\n    margin-top: 40px;\n    background-color: #e9ecef;\n    padding: 20px;\n    border-radius: 5px;\n}\n\n.instructions code {\n    background-color: #d1d5db;\n    padding: 2px 5px;\n    border-radius: 3px;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n.database-section {\n  margin-bottom: 40px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #ddd;\n}\n\n.database-description {\n    font-style: italic;\n    color: #666;\n}\n\n.properties-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.properties-table th, .properties-table td {\n  border: 1px solid #ddd;\n  padding: 12px;\n  text-align: left;\n  vertical-align: top; /* Align content to the top */\n}\n\n.properties-table th {\n  background-color: #f8f9fa;\n  font-weight: bold;\n}\n\n.dependencies-cell strong {\n    display: block;\n    margin-bottom: 4px;\n    color: #333;\n}\n\n.dependencies-cell ul {\n    margin: 5px 0 0 0;\n    padding-left: 20px;\n}\n\n.dependencies-cell li {\n    margin-bottom: 4px;\n}\n\n.formula-details code {\n  background-color: #e9ecef;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-family: 'Courier New', Courier, monospace;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  display: block;\n  margin-bottom: 10px;\n}\n\n.db-relation, .relation-prop, .rollup-prop, .rollup-func {\n    background-color: #e0e7ff;\n    color: #4338ca;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: bold;\n}\n\n.rollup-details div {\n    margin-bottom: 5px;\n}\n\n.not-applicable {\n    color: #999;\n    font-style: italic;\n}\n\n.property-type {\n    padding: 3px 8px;\n    border-radius: 12px;\n    font-size: 0.85em;\n    color: #fff;\n    background-color: #6c757d;\n    display: inline-block;\n    white-space: nowrap;\n}\n\n.property-type-formula { background-color: #28a745; }\n.property-type-relation { background-color: #6f42c1; }\n.property-type-rollup { background-color: #e83e8c; }\n.property-type-title { background-color: #007bff; }\n.property-type-rich_text { background-color: #17a2b8; }\n.property-type-number { background-color: #fd7e14; }\n.property-type-select { background-color: #6f42c1; }\n.property-type-multi_select { background-color: #e83e8c; }\n.property-type-date { background-color: #dc3545; }\n.property-type-people { background-color: #ffc107; color: #333; }\n.property-type-files { background-color: #343a40; }\n.property-type-checkbox { background-color: #20c997; }\n.property-type-url { background-color: #0062cc; }\n.property-type-email { background-color: #17a2b8; }\n.property-type-phone_number { background-color: #28a745; }\n\n.notes-template {\n    width: 100%;\n    min-height: 50px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    resize: vertical;\n    box-sizing: border-box;\n}\n\n/*\n * Highlight.js integration styles\n */\n\n/* The <pre> tag is the container for the code block.\n   We target it within the table cell for specificity. */\n.dependencies-cell pre {\n  border-radius: 6px;       /* Add rounded corners to the code block */\n  margin: 5px 0 10px 0;     /* Adjust vertical spacing */\n  white-space: pre-wrap;    /* Allow lines to wrap */\n  word-break: break-all;    /* Break long words/strings */\n}\n\n/* The <code> tag holds the actual code.\n   The GitHub theme handles colors, but we can fine-tune the font. */\n.dependencies-cell pre code.hljs { /* .hljs is the class Highlight.js adds */\n  padding: 1em; /* Ensure padding is consistent */\n  font-family: 'Courier New', Courier, monospace;\n  font-size: 0.9em; /* Slightly smaller font for dense code blocks */\n}\n\n/*\n * Highlight.js integration styles\n */\n\n/* The <pre> tag is the container for the code block. */\n.dependencies-cell pre {\n  border-radius: 6px;\n  margin: 5px 0 10px 0;\n  /* CHANGE: Use 'pre' to preserve formatting AND prevent wrapping */\n  white-space: pre; \n  /* ADDED: Enable horizontal scrolling */\n  overflow-x: auto; \n}\n\n/* The <code> tag holds the actual code. */\n.dependencies-cell pre code.hljs {\n  padding: 1em;\n  font-family: 'Courier New', Courier, monospace;\n  font-size: 0.9em;\n}\n\n/*\n * Expand Button & Modal Styles\n */\n\n.formula-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.btn-expand {\n  background: #e9ecef;\n  border: 1px solid #ced4da;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 2px 5px;\n  line-height: 1;\n  transition: background-color 0.2s;\n}\n\n.btn-expand:hover {\n  background-color: #dee2e6;\n}\n\n/* Modal Overlay */\n#code-modal {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: opacity 0.3s ease;\n}\n\n.modal-hidden {\n  opacity: 0;\n  pointer-events: none; /* Can't click on it when hidden */\n}\n\n/* Modal Content Box */\n.modal-content {\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n  padding: 20px;\n  position: relative;\n  width: 90%;\n  max-width: 1000px;\n  max-height: 90vh; /* Don't let it be taller than the screen */\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-content pre {\n  flex-grow: 1; /* Allow the pre to fill available space */\n  overflow: auto; /* Allow both vertical and horizontal scrolling */\n  margin: 0;\n  background-color: #f6f8fa; /* Match GitHub theme background */\n}\n\n.modal-close-btn {\n  color: #aaa;\n  position: absolute;\n  top: 10px;\n  right: 20px;\n  font-size: 28px;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.modal-close-btn:hover,\n.modal-close-btn:focus {\n  color: #333;\n}"
    },
    {
      "name": "routes/index.js",
      "content": "const express = require('express');\nconst router = express.Router();\nconst notionService = require('../services/notionService');\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Notion Documentation Generator' });\n});\n\n/* POST to generate documentation */\nrouter.post('/generate', async (req, res, next) => {\n  const { pageId } = req.body;\n  if (!pageId) {\n    return res.render('index', { \n      title: 'Notion Documentation Generator', \n      error: 'Please provide a Notion Page ID.' \n    });\n  }\n\n  try {\n    const documentation = await notionService.generateDocumentation(pageId);\n    if (documentation.length === 0) {\n        return res.render('index', { \n          title: 'Notion Documentation Generator', \n          error: 'No databases found on the specified page. Ensure the page ID is correct and the integration has access.' \n        });\n    }\n    res.render('documentation', { \n      title: 'Generated Documentation', \n      databases: documentation,\n      pageId: pageId\n    });\n  } catch (error) {\n    console.error(error);\n    // More specific error messages for the user\n    let userError = 'An error occurred while fetching data from Notion. Please check the console for details.';\n    if (error.code === 'object_not_found' || error.status === 404) {\n        userError = 'The provided Page ID was not found. Please ensure it is correct and that your Notion integration has been shared with that page.';\n    }\n    if (error.code === 'unauthorized' || error.status === 401) {\n        userError = 'The Notion API Key is invalid or has not been provided. Please check your .env file.';\n    }\n    res.render('index', { \n      title: 'Notion Documentation Generator', \n      error: userError \n    });\n  }\n});\n\nmodule.exports = router;"
    },
    {
      "name": "services/notionService.js",
      "content": "const { Client } = require('@notionhq/client');\n\n// Initializing a client\nconst notion = new Client({\n  auth: process.env.NOTION_API_KEY,\n});\n\n/**\n * Fetches all child database blocks from a given Notion page.\n * @param {string} pageId - The ID of the Notion page.\n * @returns {Promise<Array<string>>} - A promise that resolves to an array of database IDs.\n */\nasync function getDatabasesFromPage(pageId) {\n  try {\n    const response = await notion.blocks.children.list({ block_id: pageId });\n    const databaseIds = response.results\n      .filter(block => block.type === 'child_database')\n      .map(block => block.id);\n    return databaseIds;\n  } catch (error) {\n    console.error('Error fetching blocks from page:', error.body || error);\n    throw error;\n  }\n}\n\n/**\n * Replaces Notion's internal property placeholders in a formula with human-readable prop(\"...\") syntax.\n * @param {string} expression - The raw formula expression from the Notion API.\n * @param {Object<string, string>} idToNameMap - A map of property IDs to property names for the current database.\n * @returns {string} - The human-readable formula string.\n */\nfunction humanizeFormula(expression, idToNameMap) {\n    if (!expression) return \"\";\n    // Regex to find Notion's new formula placeholders.\n    const regex = /\\{\\{notion:block_property:([^:]+):[^{}]*\\}\\}/g;\n\n    return expression.replace(regex, (match, encodedId) => {\n        // **FIX**: Use the encoded ID directly for the lookup, without decoding.\n        const propName = idToNameMap[encodedId];\n        // Replace with prop(\"...\") syntax if we found a matching property name\n        return propName ? `prop(\"${propName}\")` : match; \n    });\n}\n\n/**\n * Parses a formula expression to find dependencies on other properties.\n * Handles both new (Formula 2.0) and old formula syntax.\n * @param {string} expression - The formula expression string.\n * @param {Object<string, string>} idToNameMap - A map of property IDs to property names.\n * @returns {Array<string>} - An array of property names this formula depends on.\n */\nfunction getFormulaDependencies(expression, idToNameMap) {\n    if (!expression) return [];\n    const dependencies = new Set();\n    let matches;\n\n    // Regex for new formula format (e.g., {{notion:block_property:id:...}}).\n    const v2Regex = /\\{\\{notion:block_property:([^:]+):[^{}]*\\}\\}/g;\n    while ((matches = v2Regex.exec(expression)) !== null) {\n        // **FIX**: Use the captured encoded ID directly for the lookup.\n        const encodedId = matches[1];\n        const propName = idToNameMap[encodedId];\n        if (propName) {\n            dependencies.add(propName);\n        }\n    }\n\n    // Regex for old formula format (e.g., prop(\"Name\")) for backward compatibility\n    const v1Regex = /propKATEX_INLINE_OPEN\"([^\"]+)\"KATEX_INLINE_CLOSE/g;\n    while ((matches = v1Regex.exec(expression)) !== null) {\n        dependencies.add(matches[1]);\n    }\n\n    return Array.from(dependencies);\n}\n\n/**\n * Retrieves detailed information about a specific database, including properties, formulas, and relations.\n * @param {string} databaseId - The ID of the Notion database.\n * @returns {Promise<Object>} - A promise that resolves to an object containing database details.\n */\nasync function getDatabaseDetails(databaseId) {\n  try {\n    const response = await notion.databases.retrieve({ database_id: databaseId });\n    const properties = [];\n\n    // Create a map from property ID to property name for resolving formula dependencies.\n    // The key here is the raw `prop.id` which may be URL-encoded.\n    const idToNameMap = Object.values(response.properties).reduce((map, prop) => {\n        map[prop.id] = prop.name;\n        return map;\n    }, {});\n\n    for (const [name, prop] of Object.entries(response.properties)) {\n      let details = {\n        name: name,\n        type: prop.type,\n        formula: null,\n        dependencies: [],\n        relation: null,\n        rollup: null,\n        template: ''\n      };\n\n      if (prop.type === 'formula' && prop.formula) {\n        const rawExpression = prop.formula.expression;\n        // Convert formula to a more human-readable format\n        details.formula = humanizeFormula(rawExpression, idToNameMap);\n        // Extract dependencies from the raw formula\n        details.dependencies = getFormulaDependencies(rawExpression, idToNameMap);\n      }\n\n      if (prop.type === 'relation' && prop.relation) {\n        details.relation = {\n            database_id: prop.relation.database_id\n        };\n      }\n\n      if (prop.type === 'rollup' && prop.rollup) {\n        details.rollup = {\n            relation_property_name: prop.rollup.relation_property_name,\n            rollup_property_name: prop.rollup.rollup_property_name,\n            function: prop.rollup.function\n        };\n      }\n      \n      properties.push(details);\n    }\n\n    return {\n      id: response.id,\n      title: response.title.length > 0 ? response.title[0].plain_text : 'Untitled Database',\n      description: response.description.length > 0 ? response.description[0].plain_text : '',\n      properties: properties,\n    };\n  } catch (error) {\n    console.error(`Error fetching details for database ${databaseId}:`, error.body || error);\n    throw error;\n  }\n}\n\n/**\n * Main function to generate documentation for all databases on a page.\n * @param {string} pageId - The ID of the Notion page.\n * @returns {Promise<Array<Object>>} - A promise that resolves to an array of documentation objects for each database.\n */\nasync function generateDocumentation(pageId) {\n  const databaseIds = await getDatabasesFromPage(pageId);\n  if (databaseIds.length === 0) {\n    return [];\n  }\n\n  const documentation = await Promise.all(\n    databaseIds.map(id => getDatabaseDetails(id))\n  );\n\n  // Create a map of database IDs to their titles for easy lookup\n  const dbIdToTitleMap = documentation.reduce((acc, db) => {\n      acc[db.id] = db.title;\n      return acc;\n  }, {});\n\n  // Augment documentation with relation titles\n  documentation.forEach(db => {\n      db.properties.forEach(prop => {\n          if (prop.relation && dbIdToTitleMap[prop.relation.database_id]) {\n              prop.relation.database_title = dbIdToTitleMap[prop.relation.database_id];\n          }\n      });\n  });\n\n  return documentation;\n}\n\nmodule.exports = { generateDocumentation };"
    },
    {
      "name": "views/documentation.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <a href=\"/\" class=\"btn-back\">← Back to Home</a>\n    <h1><%= title %></h1>\n    <p>Documentation generated for databases on page: <strong><%= pageId %></strong></p>\n\n    <% databases.forEach(db => { %>\n      <div class=\"database-section\" style=\"overflow-x: scroll;\">\n        <h2>Database: <%= db.title %></h2>\n        <% if (db.description) { %>\n          <p class=\"database-description\"><%= db.description %></p>\n        <% } %>\n        \n        <h3>Properties & Schema</h3>\n        <table class=\"properties-table\">\n          <thead>\n            <tr>\n              <th>Property Name</th>\n              <th>Type</th>\n              <th>Dependencies & Relations</th>\n              <th>Notes (Template)</th>\n            </tr>\n          </thead>\n          <tbody>\n            <% db.properties.forEach(prop => { %>\n              <tr>\n                <td><%= prop.name %></td>\n                <td><span class=\"property-type property-type-<%= prop.type %>\"><%= prop.type %></span></td>\n                <td class=\"dependencies-cell\" style=\"overflow-x: scroll;max-width: 200px;\">\n                  <% if (prop.type === 'formula') { %>\n                    <div class=\"formula-details\">\n                      <div class=\"formula-header\">\n                        <strong>Formula:</strong>\n                        <button class=\"btn-expand\" title=\"Expand Code\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"16\" height=\"16\"><path d=\"M9 3H3v6h1.5V4.5H9V3zm6 0v1.5h4.5V9H21V3h-6zM9 21v-1.5H4.5V15H3v6h6zm6 0h6v-6h-1.5v4.5H15V21z\"></path></svg>\n                        </button>\n                      </div>\n                      <pre style=\"width: max-content;padding-right: 1rem;\"><code style=\"max-width: fit-content;\" class=\"language-javascript\"><%= prop.formula %></code></pre>\n\n                      <% if (prop.dependencies.length > 0) { %>\n                        <strong>Depends on:</strong>\n                        <ul>\n                          <% prop.dependencies.forEach(dep => { %>\n                            <li><%= dep %></li>\n                          <% }); %>\n                        </ul>\n                      <% } %>\n                    </div>\n                  <% } else if (prop.type === 'relation' && prop.relation) { %>\n                    <div class=\"relation-details\">\n                      <strong>Relation to:</strong> \n                      <span class=\"db-relation\"><%= prop.relation.database_title || prop.relation.database_id %></span>\n                    </div>\n                  <% } else if (prop.type === 'rollup' && prop.rollup) { %>\n                    <div class=\"rollup-details\">\n                      <div><strong>Rollup via:</strong> <span class=\"relation-prop\"><%= prop.rollup.relation_property_name %></span></div>\n                      <div><strong>Of Property:</strong> <span class=\"rollup-prop\"><%= prop.rollup.rollup_property_name %></span></div>\n                      <div><strong>Using:</strong> <span class=\"rollup-func\"><%= prop.rollup.function %></span></div>\n                    </div>\n                  <% } else { %>\n                    <span class=\"not-applicable\">N/A</span>\n                  <% } %>\n                </td>\n                <td>\n                  <textarea class=\"notes-template\" placeholder=\"Add your notes here...\"></textarea>\n                </td>\n              </tr>\n            <% }); %>\n          </tbody>\n        </table>\n      </div>\n    <% }); %>\n  </div>\n\n  <div id=\"code-modal\" class=\"modal-hidden\">\n    <div class=\"modal-content\">\n      <span class=\"modal-close-btn\">&times;</span>\n      <pre><code id=\"modal-code\" class=\"language-javascript\"></code></pre>\n    </div>\n  </div>\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n  <script>\n    // Initialize Highlight.js for all code blocks on page load\n    hljs.highlightAll();\n\n    // --- Modal Logic ---\n    const modal = document.getElementById('code-modal');\n    const modalCodeElement = document.getElementById('modal-code');\n    const closeModalBtn = document.querySelector('.modal-close-btn');\n\n    // Add event listener to all \"Expand\" buttons\n    document.querySelectorAll('.btn-expand').forEach(button => {\n      button.addEventListener('click', function() {\n        // --- FIX START ---\n        // Get the already-highlighted HTML from the source code block\n        const originalCodeHTML = this.closest('.formula-details').querySelector('pre code').innerHTML;\n        \n        // Set the innerHTML of the modal code block to preserve the highlighting\n        modalCodeElement.innerHTML = originalCodeHTML;\n        \n        // The call to hljs.highlightElement() is no longer needed\n        // --- FIX END ---\n        \n        // Show the modal\n        modal.classList.remove('modal-hidden');\n      });\n    });\n\n    // Function to close the modal\n    function closeModal() {\n      modal.classList.add('modal-hidden');\n    }\n\n    // Close modal when the close button is clicked\n    closeModalBtn.addEventListener('click', closeModal);\n\n    // Close modal when clicking on the background overlay\n    modal.addEventListener('click', function(event) {\n      if (event.target === modal) {\n        closeModal();\n      }\n    });\n  </script>\n</body>\n</html>"
    },
    {
      "name": "views/error.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Error</title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n</head>\n<body>\n    <div class=\"container\">\n        <h1><%= message %></h1>\n        <h2><%= error.status %></h2>\n        <pre><%= error.stack %></pre>\n    </div>\n</body>\n</html>"
    },
    {
      "name": "views/index.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel='stylesheet' href='/stylesheets/style.css' />\n</head>\n<body>\n  <div class=\"container\">\n    <h1><%= title %></h1>\n    <p>Enter the ID of your Notion page to generate documentation for its databases.</p>\n    \n    <% if (typeof error !== 'undefined' && error) { %>\n      <div class=\"error-message\"><%= error %></div>\n    <% } %>\n\n    <form action=\"/generate\" method=\"POST\">\n      <div class=\"form-group\">\n        <label for=\"pageId\">Notion Page ID:</label>\n        <input type=\"text\" id=\"pageId\" name=\"pageId\" placeholder=\"e.g., 1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c\" required>\n      </div>\n      <button type=\"submit\" class=\"btn\">Generate Documentation</button>\n    </form>\n    \n    <div class=\"instructions\">\n      <h2>How to get your Page ID:</h2>\n      <ol>\n        <li>Open your Notion page in a web browser.</li>\n        <li>The URL will look like: <code>https://www.notion.so/Your-Page-Title-<b>1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c</b></code></li>\n        <li>The Page ID is the long string of characters at the end of the URL.</li>\n        <li>Make sure you have shared this page with your Notion Integration.</li>\n      </ol>\n    </div>\n  </div>\n</body>\n</html>"
    },
    {
      "name": "views/layout.ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><%= title %></title>\n  <link rel=\"stylesheet\" href=\"/stylesheets/style.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <%- body %>\n  </div>\n</body>\n</html>"
    }
  ]
}